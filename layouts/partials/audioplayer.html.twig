<audio controls src="{{ page.episode.file }}" id="audioplayer"></audio>
<p><a href="{{ page.episode.file }}" target="_blank" rel="noopener" download>Download file</a> | <a href="{{ page.episode.file }}" target="_blank" rel="noopener">Play in new window</a></p>
<script>
  window.addEventListener('DOMContentLoaded', (event) => {
    let audioplayer = document.getElementById('audioplayer');
    // resume position
    //audioplayer.onloadedmetadata = (event) => {
    setTimeout(function() {
      let startTime = localStorage.getItem('{{ page.episode.file }}');
      console.log('startTime: ', startTime);
      if (startTime !== null) {
        audioplayer.currentTime = startTime;
      }
    }, 1000);
    //};
    // save position
    audioplayer.ontimeupdate = function() {
      document.title = '{{ page.title }} (' + formatTime(audioplayer.currentTime) + ')';
      if (audioplayer.currentTime > 0) {
        localStorage.setItem('{{ page.episode.file }}', audioplayer.currentTime);
      }
    };
    // format time
    function formatTime(time) {
      let m = Math.floor(time % 3600 / 60).toString().padStart(2,'0'),
          s = Math.floor(time % 60).toString().padStart(2,'0');

      return m + ':' + s;
    }
    // Media Session API
    if ('mediaSession' in navigator) {
      // meta data
      navigator.mediaSession.metadata = new MediaMetadata({
        title: '{{ page.title }}',
        artist: '{{ page.episode.author|default(site.podcast.author) }}',
        //album: '{{ site.baseline }}',
        artwork: [
          { src: '{{ asset(page.episode.image|default(site.podcast.image))|url }}', sizes: '1400x1400', type: 'image/png' },
        ]
      });
      // seek
      const defaultSkipTime = 10;
      navigator.mediaSession.setActionHandler('seekbackward', (details) => {
        const skipTime = details.seekOffset || defaultSkipTime;
        audioplayer.currentTime = Math.max(audioplayer.currentTime - skipTime, 0);
      });
      navigator.mediaSession.setActionHandler('seekforward', (details) => {
        const skipTime = details.seekOffset || defaultSkipTime;
        audioplayer.currentTime = Math.min(audioplayer.currentTime + skipTime, audioplayer.duration);
      });
    }
  });
</script>

{# audio player #}
<audio controls src="{{ url(page.episode.file) }}" id="audioplayer"></audio>
{# links #}
{% if site.podcast.player.links.download or site.podcast.player.links.open %}
<div class="links">
{% if site.podcast.player.links.download %}
  <a href="{{ url(page.episode.file) }}" target="_blank" rel="noopener" download>Download file</a>
{% endif %}
{% if site.podcast.player.links.download and site.podcast.player.links.open %}
&nbsp;|&nbsp;
{% endif %}
{% if site.podcast.player.links.open %}
  <a href="{{ url(page.episode.file) }}" target="_blank" rel="noopener">Play in new window</a>
{% endif %}
</div>
{% endif %}
{# CSS #}
<style>
  div.links {
    text-align: center;
  }
</style>
{# JS super powers #}
<script>{% apply minify_js %}
  window.addEventListener('DOMContentLoaded', (event) => {
    const audioplayer = document.getElementById('audioplayer');
    // loading
    //audioplayer.onloadedmetadata = (event) => {
    // onloadedmetadata event don't works...
    setTimeout(function() {
      // resume position
      const startTime = localStorage.getItem('{{ page.episode.file }}');
      console.log('startTime: ', startTime);
      if (startTime !== null) {
        audioplayer.currentTime = startTime;
      }
      // autoplay
      const hash = window.location.hash
      if (hash == '#autoplay') {
        audioplayer.play();
      }
    }, 1000);
    //};
    // playing
    audioplayer.ontimeupdate = function() {
      // save position
      if (audioplayer.currentTime > 0) {
        localStorage.setItem('{{ page.episode.file }}', audioplayer.currentTime);
      }
      // update page's title...
      const title = '{{ page.title }} (' + formatTime(audioplayer.currentTime) + ')';
      document.title = title;
      // ...and meta data
      if ('mediaSession' in navigator) {
        navigator.mediaSession.metadata = new MediaMetadata({
          title: '{{ page.title }} (' + formatTime(audioplayer.currentTime) + ')',
          artist: '{{ page.episode.author|default(site.podcast.author) }}',
          artwork: [
            { src: '{{ asset(page.episode.image|default(site.podcast.image))|url }}', sizes: '1400x1400', type: 'image/png' },
          ]
        });
      }
    };
    // display constrols
    if ('mediaSession' in navigator) {
      const defaultSkipTime = 10;
      try {
        // backward (10s)
        navigator.mediaSession.setActionHandler('seekbackward', (details) => {
          const skipTime = details.seekOffset || defaultSkipTime;
          audioplayer.currentTime = Math.max(audioplayer.currentTime - skipTime, 0);
        });
        // forward (10s)
        navigator.mediaSession.setActionHandler('seekforward', (details) => {
          const skipTime = details.seekOffset || defaultSkipTime;
          audioplayer.currentTime = Math.min(audioplayer.currentTime + skipTime, audioplayer.duration);
        });
        {%- if page.prev is defined ~%}
        // previous episode
        navigator.mediaSession.setActionHandler('previoustrack', () => {
          console.log('previous: {{ page.prev.title }}');
          window.location = '{{ url(page.prev.path) }}#autoplay';
        });
        {%- endif ~%}
        {%- if page.next is defined ~%}
        // next episode
        navigator.mediaSession.setActionHandler('nexttrack', () => {
          console.log('next: {{ page.next.title }}');
          window.location = '{{ url(page.next.path) }}#autoplay';
        });
        {%- endif ~%}
      } catch (error) {
        console.log('The Media Session action "${action}" is not supported yet.');
      }
    }
    // format time
    function formatTime(time) {
      let m = Math.floor(time % 3600 / 60).toString().padStart(2,'0'),
          s = Math.floor(time % 60).toString().padStart(2,'0');

      return m + ':' + s;
    }
  });
{% endapply %}</script>

